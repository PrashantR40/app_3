/*
Copyright 2020 k0s authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package token

import (
	"context"
	"fmt"
	"time"

	"github.com/sirupsen/logrus"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/fields"
	"k8s.io/client-go/kubernetes"

	"github.com/k0sproject/k0s/internal/pkg/random"
	k8sutil "github.com/k0sproject/k0s/pkg/kubernetes"
)

type Token struct {
	ID     string
	Role   string
	Expiry string
}

func (t Token) ToArray() []string {
	return []string{t.ID, t.Role, t.Expiry}
}

// NewManager creates a new token manager using given kubeconfig
func NewManager(kubeconfig string) (*Manager, error) {
	logrus.Debugf("loading kubeconfig from: %s", kubeconfig)
	client, err := k8sutil.NewClientFromFile(kubeconfig)
	if err != nil {
		return nil, err
	}
	return &Manager{
		client: client,
	}, nil
}

// NewManagerForClient creates a new token manager using given client
func NewManagerForClient(client kubernetes.Interface) (*Manager, error) {
	return &Manager{
		client: client,
	}, nil
}

// Manager is responsible to manage the join tokens in kube API as secrets in kube-system namespace
type Manager struct {
	client kubernetes.Interface
}

func RandomBootstrapSecret(role string, valid time.Duration) (*corev1.Secret, string, error) {
	tokenID := random.String(6)
	tokenSecret := random.String(16)

	s := corev1.Secret{
		ObjectMeta: metav1.ObjectMeta{
			Name:      fmt.Sprintf("bootstrap-token-%s", tokenID),
			Namespace: "kube-system",
		},
		Type: corev1.SecretTypeBootstrapToken,
		StringData: map[string]string{
			"token-id":     tokenID,
			"token-secret": tokenSecret,
		},
	}

	if valid != 0 {
		exp := time.Now().Add(valid).UTC().Format(time.RFC3339)
		s.StringData["expiration"] = exp
		logrus.Debug("Set expiry to ", exp)
	}

	switch role {
	case "worker":
		s.StringData["description"] = "Worker bootstrap token generated by k0s"
		s.StringData["usage-bootstrap-authentication"] = "true"
	case "controller":
		s.StringData["description"] = "Controller bootstrap token generated by k0s"
		s.StringData["usage-controller-join"] = "true"
	default:
		return nil, "", fmt.Errorf("unsupported role %q", role)
	}

	return &s, fmt.Sprintf("%s.%s", tokenID, tokenSecret), nil
}

// Create creates a new bootstrap token
func (m *Manager) Create(ctx context.Context, valid time.Duration, role string) (string, error) {
	secret, token, err := RandomBootstrapSecret(role, valid)
	if err != nil {
		return "", err
	}

	_, err = m.client.CoreV1().Secrets("kube-system").Create(ctx, secret, metav1.CreateOptions{})
	if err != nil {
		return "", err
	}

	return token, nil
}

// List returns all the join tokens for given role. If role == "" then it returns all join tokens
func (m *Manager) List(ctx context.Context, role string) ([]Token, error) {
	tokenList, err := m.client.CoreV1().Secrets("kube-system").List(ctx, metav1.ListOptions{
		FieldSelector: fields.OneTermEqualSelector("type", string(corev1.SecretTypeBootstrapToken)).String(),
	})
	if err != nil {
		return nil, err
	}
	tokens := make([]Token, 0, len(tokenList.Items))

	for _, t := range tokenList.Items {
		r := "worker"
		if string(t.Data["usage-controller-join"]) == "true" {
			r = "controller"
		}
		if r == role || role == "" {
			tokens = append(tokens, Token{
				ID:     string(t.Data["token-id"]),
				Role:   r,
				Expiry: string(t.Data["expiration"]),
			})
		}
	}
	return tokens, nil
}

func (m *Manager) Remove(ctx context.Context, tokenID string) error {
	err := m.client.CoreV1().Secrets("kube-system").Delete(ctx, fmt.Sprintf("bootstrap-token-%s", tokenID), metav1.DeleteOptions{})
	if errors.IsNotFound(err) {
		return nil
	}
	return err
}
