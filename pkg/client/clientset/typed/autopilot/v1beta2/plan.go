/*
Copyright k0s authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1beta2

import (
	"context"

	v1beta2 "github.com/k0sproject/k0s/pkg/apis/autopilot/v1beta2"
	scheme "github.com/k0sproject/k0s/pkg/client/clientset/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// PlansGetter has a method to return a PlanInterface.
// A group's client should implement this interface.
type PlansGetter interface {
	Plans() PlanInterface
}

// PlanInterface has methods to work with Plan resources.
type PlanInterface interface {
	Create(ctx context.Context, plan *v1beta2.Plan, opts v1.CreateOptions) (*v1beta2.Plan, error)
	Update(ctx context.Context, plan *v1beta2.Plan, opts v1.UpdateOptions) (*v1beta2.Plan, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1beta2.Plan, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1beta2.PlanList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	PlanExpansion
}

// plans implements PlanInterface
type plans struct {
	*gentype.ClientWithList[*v1beta2.Plan, *v1beta2.PlanList]
}

// newPlans returns a Plans
func newPlans(c *AutopilotV1beta2Client) *plans {
	return &plans{
		gentype.NewClientWithList[*v1beta2.Plan, *v1beta2.PlanList](
			"plans",
			c.RESTClient(),
			scheme.ParameterCodec,
			"",
			func() *v1beta2.Plan { return &v1beta2.Plan{} },
			func() *v1beta2.PlanList { return &v1beta2.PlanList{} }),
	}
}
